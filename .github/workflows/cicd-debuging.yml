name: CICD Developing
on:
  push:
    branches: [  "debug_cicd_config"]

jobs:
  # build-backend-service:
  #   name: Build API Backend Service
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
      
  #     - name: Set appsettings.json Variable Substitution
  #       uses: microsoft/variable-substitution@v1
  #       with:
  #         files: 'SharedSettings/appsettings.json'
  #       env:
  #         BraintreeGateway.MerchantId: ${{ secrets.BRAINTREE_GATEWAY_MERCHANTID }}
  #         BraintreeGateway.PublicKey: ${{ secrets.BRAINTREE_GATEWAY_PUBLICKEY }}
  #         BraintreeGateway.PrivateKey: ${{ secrets.BRAINTREE_GATEWAY_PRIVATEKEY }}
  #         Environment.Appname: ${{ secrets.ENVIRONMENT_APP_NAME }}
  #         Environment.SelfDomain: ${{ secrets.ENVIRONMENT_SELF_DOMAIN }}
  #         Environment.AlgorithmServiceGADomains: ${{ secrets.ENVIRONMENT_ALGORITHM_SERVICE_GA_DOMAINS }}
  #         Environment.SolverServiceDomains: ${{ secrets.ENVIRONMENT_SOLVER_SERVICE_DOMAINS }}
  #         ConnectAppKey.CliendId: ${{ secrets.CONNECT_APP_KEY_CLIEND_ID }}
  #         ConnectAppKey.ClientSecret: ${{ secrets.CONNECT_APP_KEY_CLIENT_SECRET }}
  #         ConnectionStrings.DB: ${{ secrets.SQL_CONNECTION_STRING }}
  #         Jwt.Key: ${{ secrets.JWT_KEY }}
    
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: "JiraSchedulingConnectAppService/Dockerfile"
  #         push: true
  #         tags: ${{ vars.REGISTRY }}/${{ vars.BE_SERVICE_IMAGE }}:${{ github.sha }}, ${{ vars.REGISTRY }}/${{ vars.BE_SERVICE_IMAGE }}:dev-latest
          
  #         labels: ${{ steps.meta.outputs.labels }}
  

  # build-admin-service:
  #   name: Build Admin service
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
     
  #     # - name: Log in to Docker Hub
  #     #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #     #   with:
  #     #     username: ${{ secrets.DOCKER_USERNAME }}
  #     #     password: ${{ secrets.DOCKER_PASSWORD }}
      
  #     - name: Set appsettings.json Variable Substitution
  #       uses: microsoft/variable-substitution@v1
  #       with:
  #         files: 'SharedSettings/appsettings.json'
  #       env:
  #         Environment.Appname: ${{ secrets.ENVIRONMENT_APP_NAME }}
  #         ConnectionStrings.DB: ${{ secrets.SQL_CONNECTION_STRING }}
  #         Jwt.Key: ${{ secrets.JWT_KEY }}
      
  #     - uses: 'google-github-actions/auth@v1'
  #       with:
  #         credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

  #     - name: Login to GAR
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}
  #         username: _json_key
  #         password: ${{ secrets.GOOGLE_CREDENTIALS }}
      
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       env:
  #         CLOUD_ARTIFACT_REPO: "wotaas"
  #         IMAGE_VERSION: dev-latest
  #       with:
  #         context: .
  #         file: "ResourceAssignAdmin/Dockerfile"
  #         push: true
  #         tags:  ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ vars.ADMIN_WEBAPP_IMAGE }}:${{ github.sha }}, ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ vars.ADMIN_WEBAPP_IMAGE }}:${{env.IMAGE_VERSION}}
  #         labels: ${{ steps.meta.outputs.labels }}

      # - name: Build and pus
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: "ResourceAssignAdmin/Dockerfile"
      #     push: true
      #     tags: ${{ vars.REGISTRY }}/${{ vars.ADMIN_WEBAPP_IMAGE }}:${{ github.sha }} ,  ${{ vars.REGISTRY }}/${{ vars.ADMIN_WEBAPP_IMAGE }}:dev-latest
      #     labels: ${{ steps.meta.outputs.labels }}


  # build-gateway-service:
  #   name: Build & Push Gateway Service
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #     - uses: 'google-github-actions/auth@v1'
  #       with:
  #         credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
      
  #     - name: Login to GAR
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}
  #         username: _json_key
  #         password: ${{ secrets.GOOGLE_CREDENTIALS }}
        
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       env:
  #         CLOUD_ARTIFACT_REPO: "wotaas"
  #         GATEWAY_SERIVCE_IMAGE: "gateway_service"
  #         IMAGE_VERSION: dev-latest
  #       with:
  #         context: GatewayAppService/.
  #         file: "GatewayAppService/Dockerfile"
  #         push: true
  #         tags:  ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ env.GATEWAY_SERIVCE_IMAGE }}:${{ github.sha }}, ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ env.GATEWAY_SERIVCE_IMAGE }}:${{env.IMAGE_VERSION}}
  #         labels: ${{ steps.meta.outputs.labels }}
  
  deploy-to-staging:
    name:  Staging | Deploy Backend Service
    if: github.event.ref == 'refs/heads/main' || github.event.ref == 'refs/heads/debug_cicd_config'
    needs: [
      # automated-api-algorithm-tests,
      # build-backend-service, 
      # build-gateway-service
      ]
    runs-on: ubuntu-latest

    environment:
      name: Staging
      url:  https://staging-be.ai4cert.com
    steps:
      - name: Setup SSH To Connect Server
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      
      # - name: Login to GAR
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}
      #     username: _json_key
      #     password: ${{ secrets.GOOGLE_CREDENTIALS }}
     


      - name: Login Docker by Google Credentials
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo '${{ secrets.GOOGLE_CREDENTIALS }}' > google-credentials.json \
          && cat  google-credentials.json | docker login -u _json_key --password-stdin https://${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}"


      - name: Connect & Pull & Deploy
        run: |
          branch_name=$(echo "${GITHUB_REF#refs/heads/}")
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "if [ ! -d BE_REPO ]; then
              git clone https://github.com/5-Niubi/JiraSchedulingConnectBE.git BE_REPO
            fi \
          && cd BE_REPO \
          && git checkout $branch_name && git pull \
          && BACKEND_REPOSITORY="pham2604/5niubi_backend" \
          GATEWAY_REPOSITORY="${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ env.GATEWAY_SERIVCE_IMAGE }}:${{env.IMAGE_VERSION}}" \
          ADMIN_REPOSITORY="pham2604/admin_webapp" \
          ASPNETCORE_ENVIRONMENT=${{ vars.ASPNETCORE_ENVIRONMENT }} \
          VERSION="dev-latest" \
          docker compose -f docker-compose.backend.yml up -d \
          && sudo docker image prune -a --force && exit"
      
      - name: cleanup
        run: rm -rf ~/.ssh

  automated-api-tests:
    name: Staging | API Testing
    runs-on: ubuntu-latest
    needs: [
      deploy-to-staging
      ]

    steps:
      - uses: actions/checkout@v3
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests in Staging ENV
        run: |
          postman collection run "22303980-e10b19fb-a5b1-4d57-83b2-e5ea2392ad6f" -e "28333090-bf419cae-814d-4918-9b8a-8c73ee15f2fc"

  deploy-to-production:
    name:  Production | Deploy Backend Service
    if: github.event.ref == 'refs/heads/main'
    needs: [
      automated-api-tests
      ]

    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://production-be.ai4cert.com
    steps:
      
      - name: Setup SSH To Connect Server
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      
      - name: Connect & Pull & Deploy
        run: |
          branch_name=$(echo "${GITHUB_REF#refs/heads/}")
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "if [ ! -d BE_REPO ]; then
              git clone https://github.com/5-Niubi/JiraSchedulingConnectBE.git BE_REPO
            fi \
          && cd BE_REPO \
          && git checkout $branch_name && git pull \
          && sudo BACKEND_REPOSITORY="pham2604/5niubi_backend" \
          GATEWAY_REPOSITORY= ${{ vars.REGISTRY }}/gateway_service:dev-latest \
          ADMIN_REPOSITORY="pham2604/admin_webapp" \
          ASPNETCORE_ENVIRONMENT=${{ vars.ASPNETCORE_ENVIRONMENT }} \
          VERSION=${{ github.sha }} \
          docker-compose -f docker-compose.backend.yml up -d \
          && sudo docker image prune -a --force && exit"
      
      - name: cleanup
        run: rm -rf ~/.ssh

  automated-api-tests-production:
    name: Production | API Testing
    runs-on: ubuntu-latest
    needs: [
      deploy-to-production
      ]
    steps:
      - uses: actions/checkout@v3
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests in Production ENV
        run: |
          postman collection run "22303980-e10b19fb-a5b1-4d57-83b2-e5ea2392ad6f" -e "28333090-75f0a011-7892-466d-999f-845a79cc9cc9"


  # build-algo-service:
  #   name: Build API Algorithm Service
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: 'actions/checkout@v3'
  #   - uses: 'google-github-actions/auth@v1'
  #     with:
  #       credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
  #   - name: Login to GAR
  #     uses: docker/login-action@v2
  #     with:
  #       registry: ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}
  #       username: _json_key
  #       password: ${{ secrets.GOOGLE_CREDENTIALS }}
    
  #   - name: Build and push
  #     uses: docker/build-push-action@v4
  #     env:
  #       CLOUD_ARTIFACT_REPO: "wotaas"
  #       IMAGE_VERSION: dev-latest
  #     with:
  #       context: .
  #       file: "AlgorithmService/Dockerfile"
  #       push: true
  #       tags:  ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ vars.ALGO_SERVICE_IMAGE }}:${{ github.sha }}, ${{ secrets.GOOGLE_ARTIFACT_REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.CLOUD_ARTIFACT_REPO }}/${{ vars.ALGO_SERVICE_IMAGE }}:${{env.IMAGE_VERSION}}
  #       labels: ${{ steps.meta.outputs.labels }}

  # deploy-common-algo-service:
  #   name: Deploy Common Algorithm serivce to Cloud run
  #   runs-on: ubuntu-latest
  #   needs: [
  #     build-algo-service
  #     ]
  #   steps:
  #   - uses: 'actions/checkout@v3'
  #   - uses: 'google-github-actions/auth@v1'
  #     with:
  #       credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

  #   - name: Deploy to Cloud run
  #     run: gcloud run services replace .cloudrun/ga-and-estimate-algo-service.yml

  # deploy-ortool-algo-service:
  #   name: Deploy Ortool Algorithm serivce to Cloud run
  #   runs-on: ubuntu-latest
  #   needs: [
  #     build-algo-service
  #     ]
  #   steps:
  #   - uses: 'actions/checkout@v3'
  #   - uses: 'google-github-actions/auth@v1'
  #     with:
  #       credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

  #   - name: Deploy to Cloud run
  #     run: gcloud run services replace .cloudrun/ortool-algo-service.yml

  # automated-api-algorithm-tests:
  #   name: API Algorithm Service Testing
  #   runs-on: ubuntu-latest
  #   needs: [
  #     deploy-common-algo-service,
  #     deploy-ortool-algo-service,

  #     ]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install Postman CLI
  #       run: |
  #         curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
  #     - name: Login to Postman CLI
  #       run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
  #     - name: Run API tests in Staging ENV
  #       run: |
  #         postman collection run 22303980-e10b19fb-a5b1-4d57-83b2-e5ea2392ad6f -e 28333090-bf419cae-814d-4918-9b8a-8c73ee15f2fc -i 22303980-180eea1d-ecc2-4728-98f3-6c2b63130289


  


  