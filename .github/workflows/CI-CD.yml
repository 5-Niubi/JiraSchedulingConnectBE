# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI + Continuous Delivery Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # build-algorithm-service:
  #   name: Build + Push Algorithm Service
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
      
  #     - name: Extract metadata for the Docker image
  #       id: meta
  #       uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #       with:
  #         images: ${{ vars.REGISTRY }}/${{ vars.ALGO_SERVICE_IMAGE }}

  #     - name: Passing ConnectionString to Appsettings.Production.json
  #       run: |
  #         echo "$(jq '.ConnectionStrings.DB = "Server=${{ secrets.SQL_DATABASE_HOST }};Database=${{ secrets.SQL_DATABASE_NAME }};User Id=${{ secrets.SQL_DATABASE_USERNAME }};Password=${{ secrets.SQL_DATABASE_PASSWORD }}; TrustServerCertificate=True"' SharedSettings/appsettings.Production.json)" > SharedSettings/appsettings.Production.json

  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: "AlgorithmService/Dockerfile"
  #         push: true
  #         tags: ${{ vars.REGISTRY }}/${{ vars.ALGO_SERVICE_IMAGE }}:${{ github.sha }}
  #         labels: ${{ steps.meta.outputs.labels }}

  build-backend-service:
    name: Build + Push Backend service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Check file exited
        run: |
          cat "SharedSettings/appsettings.Production.json"
      
      - name: Passing ConnectionString to Appsettings.Production.json
        run: |
          echo "$(jq '.ConnectionStrings.DB = "Server=${{ secrets.SQL_DATABASE_HOST }};Database=${{ secrets.SQL_DATABASE_NAME }};User Id=${{ secrets.SQL_DATABASE_USERNAME }};Password=${{ secrets.SQL_DATABASE_PASSWORD }}; TrustServerCertificate=True"' SharedSettings/appsettings.Production.json)" > SharedSettings/appsettings.Production.json

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ vars.REGISTRY }}/${{ vars.BE_SERVICE_IMAGE }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: "JiraSchedulingConnectAppService/Dockerfile"
          push: true
          tags: ${{ vars.REGISTRY }}/${{ vars.BE_SERVICE_IMAGE }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
  
  # build-admin-webapp:
  #   name: Build + Push Admin Webapp service
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
      
  #     - name: Passing ConnectionString to Appsettings.Production.json
  #       run: |
  #         echo "$(jq '.ConnectionStrings.DB = "Server=${{ secrets.SQL_DATABASE_HOST }};Database=${{ secrets.SQL_DATABASE_NAME }};User Id=${{ secrets.SQL_DATABASE_USERNAME }};Password=${{ secrets.SQL_DATABASE_PASSWORD }}; TrustServerCertificate=True"' SharedSettings/appsettings.Production.json)" > SharedSettings/appsettings.Production.json

  #     - name: Extract metadata for the Docker image
  #       id: meta
  #       uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #       with:
  #         images: ${{ vars.REGISTRY }}/${{ vars.ADMIN_WEBAPP_IMAGE }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: "ResourceAssignAdmin/Dockerfile"
  #         push: true
  #         tags: ${{ vars.REGISTRY }}/${{ vars.ADMIN_WEBAPP_IMAGE }}:${{ github.sha }}
  #         labels: ${{ steps.meta.outputs.labels }}

  deploy-to-dev:
    name: Deploy Backend Service to Dev environment
    if: github.event_name == 'pull_request'
    needs: [build-algorithm-service]
    runs-on: ubuntu-latest
    environment:
      name: Dev
      url: http://dev-backend.ai4cert.com
    steps:
      - name: Show variables
        run: echo "ASPNETCORE_ENVIRONMENT" + $ASPNETCORE_ENVIRONMENT
      # - name: Setup SSH To Connect Server
      #   run: |
      #     install -m 600 -D /dev/null ~/.ssh/id_rsa
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      
      # - name: Connect & Pull & Deploy
      #   run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && git checkout $(git rev-parse --abbrev-ref HEAD) && git pull && sudo IMAGE_TAG=${{ github.sha }}  ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT docker-compose -f docker-compose.backend.yml up -d && sudo docker image prune -a --force && exit"
      
      # - name: cleanup
      #   run: rm -rf ~/.ssh
    
    
  
