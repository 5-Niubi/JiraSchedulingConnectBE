            modelBuilder.Entity<AccountRole>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<AdminAccount>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<AtlassianToken>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Equipment>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<EquipmentsFunction>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Function>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Milestone>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Parameter>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<ParameterResource>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<PlanPermission>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<PlanSubscription>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Project>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Role>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Schedule>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Skill>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Subscription>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Task>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<TaskFunction>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<TaskPrecedence>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<TasksSkillsRequired>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<Workforce>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);
            modelBuilder.Entity<WorkforceSkill>().HasQueryFilter(e => e.IsDelete == Const.DELETE_STATE.NOT_DELETE);